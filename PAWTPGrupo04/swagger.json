{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "pawtpRestAPI",
        "description": ""
    },
    "host": "localhost:3000",
    "basePath": "/api",
    "tags": [
        {
            "name": "Session",
            "description": "JWT token session"
        },
        {
            "name": "Users",
            "description": "All Users of the platform, both 'utente', 'tecnico' and 'admin'"
        },
        {
            "name": "Pedidos",
            "description": "Requests made by 'utente's to be handled by the workers"
        }
    ],
    "schemes": [
        "http"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/sign-in": {
            "post": {
                "tags": [
                    "Session"
                ],
                "summary": "Allow a user to sign-in with a registered account",
                "description": "Check if account exists and if credentials are correct, creating a JWT token session",
                "parameters": [
                    {
                        "name": "userAuthInfo",
                        "in": "body",
                        "description": "User Citizen Card number (works as username) and Password",
                        "schema": {
                            "$ref": "#definitions/AuthInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns success with the JWT token",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "success": {
                                    "description": "Boolean telling the operation success",
                                    "type": "boolean"
                                },
                                "token": {
                                    "description": "The generated JWT token for this session",
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User was not authenticated",
                        "schema": {
                            "$ref": "#definitions/JsonError"
                        }
                    },
                    "404": {
                        "description": "Issues while authenticating user",
                        "schema": {
                            "$ref": "#definitions/JsonError"
                        }
                    }
                }
            }
        },
        "/sign-out": {
            "post": {
                "tags": [
                    "Session"
                ],
                "summary": "Allow a user to sign-out of it's session",
                "description": "Signals clearing of the JWT session token",
                "responses": {
                    "200": {
                        "description": "Returns a success message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user-profile": {
            "get": {
                "tags": [
                    "Session"
                ],
                "summary": "Returns profile data related to the session's User",
                "description": "If there is a user in session, returns it's model details",
                "responses": {
                    "200": {
                        "description": "User profile data",
                        "schema": {
                            "$ref": "#definitions/UserInfo"
                        }
                    }
                }
            }
        },
        "/request": {
            "get": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Get all the requests in the DB",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#definitions/PedidoInfo"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Create and save a new Request",
                "description": "Checks if the User is an 'utente' and if the request already exists, then saves the correct data do the DB",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "formData",
                        "description": "Request ID",
                        "type": "string"
                    },
                    {
                        "name": "CCutente",
                        "in": "formData",
                        "description": "Request User identification",
                        "type": "string"
                    },
                    {
                        "name": "trabalhadorDeRisco",
                        "in": "formData",
                        "description": "Request User priority attribute",
                        "type": "boolean"
                    },
                    {
                        "name": "grupoDeRisco",
                        "in": "formData",
                        "description": "Request User priority attribute",
                        "type": "boolean"
                    },
                    {
                        "name": "encaminhado_saude24",
                        "in": "formData",
                        "description": "Request User priority attribute",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "success": {
                                    "description": "Boolean telling the operation success",
                                    "type": "boolean"
                                },
                                "data": {
                                    "$ref": "#definitions/PedidoRequiredInfo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failure, couldn't create request",
                        "schema": {
                            "$ref": "#definitions/JsonError"
                        }
                    }
                }
            }
        },
        "/request/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "ID of the targeted Request",
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Get the specific request via ID",
                "description": "Finds the Request related to the 'id' parameter and returns it's information",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "$ref": "#definitions/PedidoInfo"
                        }
                    },
                    "404": {
                        "description": "Failure, could not find request"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Marks a specific entry in the DB for deletion, signaling for the DB manager",
                "description": "Finds the Request related to the 'id' parameter and performs the delete task",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "old": {
                                    "$ref": "#definitions/PedidoInfo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failure, something went wrong. Request may already been deleted."
                    }
                }
            }
        },
        "/request/saude24": {
            "get": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Get requests in DB in which users were sent by Saude24",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#definitions/PedidoInfo"
                            }
                        }
                    },
                    "404": {
                        "description": "Failure, could not find requests, check DB connections or DB data"
                    }
                }
            }
        },
        "/request/gruposrisco": {
            "get": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Get requests in DB in which users belong to a Risk Group",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#definitions/PedidoInfo"
                            }
                        }
                    },
                    "404": {
                        "description": "Failure, could not find requests, check DB connections or DB data"
                    }
                }
            }
        },
        "/request/trabalhadores": {
            "get": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Get requests in DB in which users work in a Risk job",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#definitions/PedidoInfo"
                            }
                        }
                    },
                    "404": {
                        "description": "Failure, could not find requests, check DB connections or DB data"
                    }
                }
            }
        },
        "/request/infetados": {
            "get": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Get requests in DB in which users were infected at the time of the request",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#definitions/PedidoInfo"
                            }
                        }
                    },
                    "404": {
                        "description": "Failure, could not find requests, check DB connections or DB data"
                    }
                }
            }
        },
        "/request/testespositivos": {
            "get": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Get requests in DB in which users were found positive",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#definitions/PedidoInfo"
                            }
                        }
                    },
                    "404": {
                        "description": "Failure, could not find requests, check DB connections or DB data"
                    }
                }
            }
        },
        "/request/testesnegativos": {
            "get": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Get requests in DB in which users were found negative",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#definitions/PedidoInfo"
                            }
                        }
                    },
                    "404": {
                        "description": "Failure, could not find requests, check DB connections or DB data"
                    }
                }
            }
        },
        "/request/countDay/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "Date related to the day to search",
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Get the total number of Tests made in a certain day",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "404": {
                        "description": "Failure, check if parameters are well written!"
                    }
                }
            }
        },
        "/request/user/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "CC (Citizen Card number) of the targeted user",
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Get requests in DB belonging to a certain user",
                "description": "Gets the requests only if the user has it's session active, or the user is an 'admin'",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#definitions/PedidoInfo"
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have the session active or is not an 'admin'"
                    },
                    "404": {
                        "description": "Failure, could not find requests, check DB connections or DB data"
                    }
                }
            }
        },
        "/request/download/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "Request identification (Mongo ObjectID)",
                    "type": "string"
                }
            ],
            "produces": [
                "application/pdf"
            ],
            "get": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Get File related to the Request for download",
                "description": "Gets the File only if the User is an 'admin' or 'tecnico'",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "type": "file"
                    },
                    "404": {
                        "description": "Failure, could not find requests, check DB connections or DB data"
                    }
                }
            }
        },
        "/request/update/firstDate/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "Request identification (Mongo ObjectID)",
                    "type": "string"
                },
                {
                    "name": "RequestInfo",
                    "in": "body",
                    "required": true,
                    "description": "Information to update the Request.",
                    "schema": {
                        "type": "object",
                        "properties": {
                            "testDate": {
                                "required": true,
                                "description": "Date information for the Test (yyyy-mm-dd)",
                                "type": "string",
                                "format": "date"
                            }
                        }
                    }
                }
            ],
            "put": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Updates the first test date of a specific Request",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "$ref": "#definitions/PedidoUpdate"
                        }
                    },
                    "404": {
                        "description": "Failure, something went wrong while trying to update the request. Check returned message!"
                    },
                    "400": {
                        "description": "Failure, missing information"
                    }
                }
            }
        },
        "/request/update/firstTest/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "Request identification (Mongo ObjectID)",
                    "type": "string"
                },
                {
                    "name": "RequestInfo",
                    "in": "body",
                    "required": true,
                    "description": "Information to update the Request. NOTE: 'secondTestDate' needed only if 'testResult' is false!",
                    "schema": {
                        "type": "object",
                        "properties": {
                            "testResult": {
                                "required": true,
                                "description": "Result information about the Test",
                                "type": "boolean"
                            },
                            "secondTestDate": {
                                "description": "Date information for the next Test (yyyy-mm-dd).",
                                "type": "string",
                                "format": "date"
                            }
                        }
                    }
                }
            ],
            "put": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Updates the first Test result of a Request",
                "description": "A second Test may be scheduled if the result is 'false'. In this case the second Test date is mandatory. Otherwise, diagnosis is finished",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "$ref": "#definitions/PedidoUpdate"
                        }
                    },
                    "404": {
                        "description": "Failure, something went wrong while trying to update the request. Check returned message!"
                    },
                    "400": {
                        "description": "Failure, missing information"
                    }
                }
            }
        },
        "/request/update/secondDate/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "Request identification (Mongo ObjectID)",
                    "type": "string"
                },
                {
                    "name": "RequestInfo",
                    "in": "body",
                    "required": true,
                    "description": "Information to update the Request.",
                    "schema": {
                        "type": "object",
                        "properties": {
                            "testDate": {
                                "required": true,
                                "description": "Date information for the Test (yyyy-mm-dd)",
                                "type": "string",
                                "format": "date"
                            }
                        }
                    }
                }
            ],
            "put": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Updates the second Test date of a specific Request",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "$ref": "#definitions/PedidoUpdate"
                        }
                    },
                    "404": {
                        "description": "Failure, something went wrong while trying to update the request. Check returned message!"
                    },
                    "400": {
                        "description": "Failure, missing information"
                    }
                }
            }
        },
        "/request/update/secondTest/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "Request identification (Mongo ObjectID)",
                    "type": "string"
                },
                {
                    "name": "RequestInfo",
                    "in": "body",
                    "required": true,
                    "description": "Information to update the Request.",
                    "schema": {
                        "type": "object",
                        "properties": {
                            "testResult": {
                                "required": true,
                                "description": "Result information about the Test",
                                "type": "boolean"
                            }
                        }
                    }
                }
            ],
            "put": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Updates the second Test result of a Request",
                "description": "After this Test the diagnosis if finished. A new Request needs to be made if more Tests are needed",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "$ref": "#definitions/PedidoUpdate"
                        }
                    },
                    "404": {
                        "description": "Failure, something went wrong while trying to update the request. Check returned message!"
                    },
                    "400": {
                        "description": "Failure, missing information"
                    }
                }
            }
        },
        "/request/update/worker/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "Request identification (Mongo ObjectID)",
                    "type": "string"
                },
                {
                    "name": "body",
                    "in": "body",
                    "required": true,
                    "description": "Identification of the Worker responsible for the Request",
                    "schema": {
                        "type": "object",
                        "properties": {
                            "tecnico": {
                                "type": "string"
                            }
                        }
                    }
                }
            ],
            "put": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Updates the Worker ('tecnico') who's in charge of this Request",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "$ref": "#definitions/PedidoUpdate"
                        }
                    },
                    "404": {
                        "description": "Failure, something went wrong while trying to update the request. Check returned message!"
                    },
                    "400": {
                        "description": "Failure, missing information"
                    }
                }
            }
        },
        "/request/update/upload/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "Request identification (Mongo ObjectID)",
                    "type": "string"
                },
                {
                    "name": "RequestResult",
                    "in": "formData",
                    "description": "The results PDF file finishing the Request",
                    "type": "file"
                }
            ],
            "consumes": [
                "multipart/form-data"
            ],
            "post": {
                "tags": [
                    "Pedidos"
                ],
                "summary": "Uploads the file with this Request results",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "$ref": "#definitions/PedidoUpdate"
                        }
                    },
                    "404": {
                        "description": "Failure, something went wrong while trying to update the request. Check returned message!"
                    },
                    "400": {
                        "description": "Failure, missing information"
                    }
                }
            }
        },
        "/user/": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get all the users in the DB",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#definitions/UserInfo"
                            }
                        }
                    },
                    "404": {
                        "description": "Failure, could not find users, check DB connections"
                    }
                }
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create and save a new User into de DB",
                "description": "Checks if the User CC already exists, then saves the correct data do the DB",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "CC",
                        "in": "formData",
                        "description": "Citizen Card number pt-PT",
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "in": "formData",
                        "description": "User password",
                        "type": "string",
                        "format": "password"
                    },
                    {
                        "name": "name",
                        "in": "formData",
                        "description": "User name",
                        "type": "string"
                    },
                    {
                        "name": "genero",
                        "in": "formData",
                        "description": "User gender",
                        "type": "string"
                    },
                    {
                        "name": "birthdate",
                        "in": "formData",
                        "description": "User birthdate",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "phoneNumber",
                        "in": "formData",
                        "description": "User phone number",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "success": {
                                    "description": "Boolean telling the operation success",
                                    "type": "boolean"
                                },
                                "data": {
                                    "$ref": "#definitions/UserInfo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failure, couldn't create User",
                        "schema": {
                            "$ref": "#definitions/JsonError"
                        }
                    }
                }
            }
        },
        "/user/utentes": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Gets all Users with role 'utente'",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#definitions/UserUtenteInfo"
                            }
                        }
                    },
                    "404": {
                        "description": "Failure, could not find users, check DB connections or DB data"
                    }
                }
            }
        },
        "/user/tecnicos": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Gets all Users with role 'tecnico'",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#definitions/UserTecnicoInfo"
                            }
                        }
                    },
                    "404": {
                        "description": "Failure, could not find users, check DB connections or DB data"
                    }
                }
            }
        },
        "/user/utentes/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "User 'utente' CC-id",
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Gets a certain User 'utente' using its CC-id",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "$ref": "#definitions/UserUtenteInfo"
                        }
                    },
                    "404": {
                        "description": "Failure, could not find user, check DB connections or DB data"
                    }
                }
            }
        },
        "/user/tecnicos/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "User 'tecnico' CC-id",
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Gets a certain User 'tecnico' using its CC-id",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "$ref": "#definitions/UserTecnicoInfo"
                        }
                    },
                    "404": {
                        "description": "Failure, could not find user, check DB connections or DB data"
                    }
                }
            }
        },
        "/user/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "User MongoDB ObjectId",
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Gets a certain User using its MongoDB ObjectId",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "$ref": "#definitions/UserInfo"
                        }
                    },
                    "404": {
                        "description": "Failure, could not find user, check DB connections or DB data"
                    }
                }
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Updates a certain User searching by it's ID",
                "description": "Only updates if the ID refers to a User with the session active or the logged User is an 'admin'",
                "parameters": [
                    {
                        "name": "UserInfo",
                        "in": "body",
                        "description": "Information to update a User. Any property may be removed.",
                        "schema": {
                            "$ref": "#definitions/UserRequiredInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "$ref": "#definitions/UserUpdate"
                        }
                    },
                    "403": {
                        "description": "Logged User doesn't have the same ID has de parameter or is not an 'admin'"
                    },
                    "404": {
                        "description": "Failure, could not find user, check DB connections or DB data"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Marks a User entry in the DB for deletion, signaling for the DB manager",
                "description": "Finds the User related to the 'id' parameter and performs the delete task",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "old": {
                                    "$ref": "#definitions/UserInfo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failure, something went wrong. User may have already been deleted."
                    }
                }
            }
        },
        "/user/CC/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "User Citizen Card Number",
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Gets a certain User using its Citizen Card Number",
                "responses": {
                    "200": {
                        "description": "Task Successful",
                        "schema": {
                            "$ref": "#definitions/UserInfo"
                        }
                    },
                    "404": {
                        "description": "Failure, could not find requests, check DB connections or DB data"
                    }
                }
            }
        }
    },
    "definitions": {
        "JsonError": {
            "type": "object",
            "properties": {
                "success": {
                    "description": "Boolean telling the operation success",
                    "type": "boolean"
                },
                "msg": {
                    "description": "The error message",
                    "type": "string"
                }
            }
        },
        "AuthInfo": {
            "type": "object",
            "properties": {
                "CC": {
                    "description": "User citizen card number (works as username)",
                    "type": "string"
                },
                "password": {
                    "description": "User password",
                    "type": "string"
                }
            },
            "required": [
                "CC",
                "password"
            ]
        },

        "UserRequiredInfo": {
            "type": "object",
            "properties": {
                "CC": {
                    "description": "Citizen Card number pt-PT",
                    "type": "string"
                },
                "password": {
                    "description": "User password",
                    "type": "string"
                },
                "name": {
                    "description": "User name",
                    "type": "string"
                },
                "genero": {
                    "description": "User gender",
                    "type": "string"
                },
                "birthdate": {
                    "description": "User birthdate",
                    "type": "string",
                    "format": "date"
                },
                "phoneNumber": {
                    "description": "User phone number",
                    "type": "string"
                }
            }
        },
        "UserUtenteInfo": {
            "type": "object",
            "properties": {
                "CC": {
                    "description": "Citizen Card number pt-PT",
                    "type": "string"
                },
                "name": {
                    "description": "User name",
                    "type": "string"
                },
                "genero": {
                    "description": "User gender",
                    "type": "string"
                },
                "birthdate": {
                    "description": "User birthdate",
                    "type": "string",
                    "format": "date"
                },
                "phoneNumber": {
                    "description": "User phone number",
                    "type": "string"
                },
                "estado": {
                    "description": "User current health state",
                    "type": "string"
                }
            }
        },
        "UserTecnicoInfo": {
            "type": "object",
            "properties": {
                "CC": {
                    "description": "Citizen Card number pt-PT",
                    "type": "string"
                },
                "name": {
                    "description": "User name",
                    "type": "string"
                },
                "genero": {
                    "description": "User gender",
                    "type": "string"
                },
                "birthdate": {
                    "description": "User birthdate",
                    "type": "string",
                    "format": "date"
                },
                "phoneNumber": {
                    "description": "User phone number",
                    "type": "string"
                }
            }
        },
        "UserInfo": {
            "type": "object",
            "properties": {
                "CC": {
                    "description": "Citizen Card number pt-PT",
                    "type": "string"
                },
                "name": {
                    "description": "User name",
                    "type": "string"
                },
                "genero": {
                    "description": "User gender",
                    "type": "string"
                },
                "birthdate": {
                    "description": "User birthdate",
                    "type": "string",
                    "format": "date"
                },
                "phoneNumber": {
                    "description": "User phone number",
                    "type": "string"
                },
                "role": {
                    "description": "User role",
                    "type": "string"
                }
            }
        },
        "UserUpdate": {
            "type": "object",
            "properties": {
                "old": {
                    "$ref": "#definitions/UserInfo"
                },
                "new": {
                    "$ref": "#definitions/UserInfo"
                }
            }
        },

        "PedidoRequiredInfo": {
            "type": "object",
            "properties": {
                "idRequest": {
                    "description": "Request ID",
                    "type": "string"
                },
                "CCutente": {
                    "description": "Request User identification",
                    "type": "string"
                },
                "trabalhadorDeRisco": {
                    "description": "Request User priority attribute",
                    "type": "boolean"
                },
                "grupoDeRisco": {
                    "description": "Request User priority attribute",
                    "type": "boolean"
                },
                "encaminhado_saude24": {
                    "description": "Request User priority attribute",
                    "type": "boolean"
                }
            }
        },
        "PedidoInfo": {
            "type": "object",
            "properties": {
                "idRequest": {
                    "description": "Request ID",
                    "type": "string"
                },
                "CCutente": {
                    "description": "Request User identification",
                    "type": "string"
                },
                "trabalhadorDeRisco": {
                    "description": "Request User priority attribute",
                    "type": "boolean"
                },
                "grupoDeRisco": {
                    "description": "Request User priority attribute",
                    "type": "boolean"
                },
                "encaminhado_saude24": {
                    "description": "Request User priority attribute",
                    "type": "boolean"
                },
                "tecnicoResponsavel": {
                    "description": "Request responsible worker identification",
                    "type": "number"
                },
                "dataInicial": {
                    "description": "Request first test date",
                    "type": "string",
                    "format": "date"
                },
                "resultadoInicial": {
                    "description": "Request first test result",
                    "type": "boolean"
                },
                "dataFinal": {
                    "description": "Request second test date",
                    "type": "string",
                    "format": "date"
                },
                "resultadoFinal": {
                    "description": "Request second test result",
                    "type": "boolean"
                },
                "casoFechado": {
                    "description": "Tells if the request is finished",
                    "type": "boolean"
                },
                "deleted": {
                    "description": "Tells if the request is deleted",
                    "type": "boolean"
                },
                "updated_at": {
                    "description": "Request last update date",
                    "type": "string",
                    "format": "date"
                }
            }
        },
        "PedidoUpdate": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string"
                },
                "old": {
                    "$ref": "#definitions/PedidoInfo"
                },
                "new": {
                    "$ref": "#definitions/PedidoInfo"
                }
            }
        }
    }
}